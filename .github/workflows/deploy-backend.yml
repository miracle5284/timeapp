name: Build and Deploy Chrona Backend

on:
  push:
    paths:
      - 'chrona-backend/**'
      - 'infra/terraform/**'
      - '.github/workflows/deploy-backend.yml'
    branches: [ "develop"]
    tags: [ "*" ]

#  workflow_run:
#    workflows: ["Build and Deploy Logging Service"]
#    types:
#      - completed
#    branches:
#      - develop
#      - staging
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

concurrency:
  group: chrona-backend
  cancel-in-progress: false

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      ENVIRONMENT: ${{ steps.set-env.outputs.ENVIRONMENT }}
    steps:
      - name: Determine Environment
        id: set-env
        run: |
          REF_TYPE="${GITHUB_REF#refs/*/}"
          REF_NAME="${GITHUB_REF##*/}"

          if [[ "$GITHUB_REF" == refs/heads/* ]]; then
            if [ "$REF_NAME" = "develop" ]; then
              echo "ENVIRONMENT=chrona-backend-dev" >> $GITHUB_OUTPUT
            fi
          elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "ENVIRONMENT=chrona-backend-prod" >> $GITHUB_OUTPUT
          else
            echo "ENVIRONMENT=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Get Env Variables
        run: |
          echo "Environment: ${{ steps.set-env.outputs.ENVIRONMENT }}"

      - name: Wait for Logging Service to stop running (if triggered)
        env:
          GH_TOKEN: ${{ secrets.GHCR_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          SHA: ${{ github.sha }}
        run: |
          echo "‚è≥ Checking for matching logging workflow run..."

          run_info=$(gh run list --repo "$OWNER/$REPO" \
            --workflow "Build and Deploy Logging Service" \
            --json headSha,status,conclusion -L 10 \
            | jq -r --arg sha "$SHA" '.[] | select(.headSha == $sha)')

          if [ -z "$run_info" ]; then
            echo "‚úÖ No matching run found. Proceeding without waiting."
            exit 0
          fi

          echo "üîç Found matching run. Waiting until it's no longer queued or running..."

          for i in {1..30}; do
            STATUS=$(echo "$run_info" | jq -r '.status')
            CONCLUSION=$(echo "$run_info" | jq -r '.conclusion')
            echo "üîÑ status=$STATUS, conclusion=$CONCLUSION"

            if [ "$STATUS" != "in_progress" ] && [ "$STATUS" != "queued" ]; then
              echo "‚úÖ Logging workflow has finished. Proceeding..."
              break
            fi

            sleep 10

            run_info=$(gh run list --repo "$OWNER/$REPO" \
              --workflow "Build and Deploy Logging Service" \
              --json headSha,status,conclusion -L 10 \
              | jq -r --arg sha "$SHA" '.[] | select(.headSha == $sha)')
          done

  test:
    runs-on: ubuntu-latest
    needs: prepare
    environment:
      name: chrona-backend-dev

    steps:
      - name: üì¶ Checkout Code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Setup Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry config virtualenvs.create true

      - name: üì¶ Install Dependencies with Poetry
        working-directory: ./chrona-backend
        run: |
          poetry install --no-interaction --no-root

      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # üì¶ Install Azure CLI (if not available)
      - name: Install Azure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y azure-cli

        # üîÅ Fetch all secrets dynamically from Key Vault and export
      - name: Export Azure Key Vault secrets to env
        run: |
          for secret_name in $(az keyvault secret list --vault-name "${{ secrets.KEY_VAULT_NAME }}" --query "[].name" -o tsv); do
            secret_value=$(az keyvault secret show --vault-name "${{ secrets.KEY_VAULT_NAME }}" --name "$secret_name" --query "value" -o tsv)
            env_var_name=$(echo "$secret_name" | tr '[:lower:]' '[:upper:]' | tr '-' '_')

            echo "Exporting $env_var_name"
            echo "$env_var_name=$secret_value" >> $GITHUB_ENV
          done

      - name: üß™ Run Unit Tests via Poetry
        working-directory: ./chrona-backend
        run: |
          poetry run pytest

      - name: üì§ Upload HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: html-coverage
          path: ./chrona-backend/htmlcov/

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [prepare, test]
    environment:
      name: ${{ needs.prepare.outputs.ENVIRONMENT }}

    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    steps:
      - name: üì¶ Checkout Code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: üê≥ Build and Push Backend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./chrona-backend
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/chrona-backend-${{ secrets.IMAGE_NAME }}:latest

      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üß± Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4

      - name: ‚úÖ Terraform Init
        working-directory: ./infra/terraform/backend
        run: |
          terraform init -upgrade \
            -backend-config="resource_group_name=${{ secrets.RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ secrets.STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.STORAGE_CONTAINER_NAME }}" \
            -backend-config="key=${{ secrets.TFSTATE_KEY }}"

      - name: ‚úÖ Terraform Plan
        working-directory: ./infra/terraform/backend
        run: |
          echo "Running Terraform Plan..."
          terraform plan -refresh=false -no-color \
            -var "resource_group_name=${{ secrets.RESOURCE_GROUP_NAME }}" \
            -var "location=${{ secrets.LOCATION }}" \
            -var "container_app_env_name=${{ secrets.CONTAINER_APP_ENV_NAME }}" \
            -var "app_name=${{ secrets.CONTAINER_APP_NAME }}" \
            -var "backend_image=ghcr.io/${{ github.repository_owner }}/chrona-backend-${{ secrets.IMAGE_NAME }}:latest" \
            -var "registry_password=${{ secrets.GHCR_TOKEN }}" \
            -var "registry_username=${{ github.repository_owner }}" \
            -var "min_replicas=${{ secrets.MIN_REPLICAS }}"


      - name: ‚úÖ Terraform Apply
        working-directory: ./infra/terraform/backend
        run: |
          terraform apply -auto-approve \
            -var "resource_group_name=${{ secrets.RESOURCE_GROUP_NAME }}" \
            -var "location=${{ secrets.LOCATION }}" \
            -var "container_app_env_name=${{ secrets.CONTAINER_APP_ENV_NAME }}" \
            -var "app_name=${{ secrets.CONTAINER_APP_NAME }}" \
            -var "backend_image=ghcr.io/${{ github.repository_owner }}/chrona-backend-${{ secrets.IMAGE_NAME }}:latest" \
            -var "registry_password=${{ secrets.GHCR_TOKEN }}" \
            -var "registry_username=${{ github.repository_owner }}" \
            -var "min_replicas=${{ secrets.MIN_REPLICAS }}"

      - name: üîë Fetch and Inject Vault Secrets into Container App
        env:
          VAULT_NAME: ${{ secrets.KEY_VAULT_NAME }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          CONTAINER_APP_NAME: ${{ secrets.CONTAINER_APP_NAME }}
        run: |
          echo "üîé Fetching secrets from Key Vault..."
          secrets=$(az keyvault secret list --vault-name "$VAULT_NAME" --query "[].name" -o tsv)
          
          echo "üöÄ Preparing secrets injection..."
          secrets_args=""
          
          for secret in $secrets
          do
            lowercase_secret="${secret,,}"
          
            # Fetch secret value
            value=$(az keyvault secret show --vault-name "$VAULT_NAME" --name "$secret" --query "value" -o tsv)
          
            # Add to secrets_args (quote value to handle spaces/special chars)
            secrets_args="$secrets_args $lowercase_secret=$value"
          done
          
          echo "Injecting all secrets in single batch..."
          az containerapp secret set \
            --name "$CONTAINER_APP_NAME" \
            --resource-group "$RESOURCE_GROUP_NAME" \
            --secrets $secrets_args

      - name: üîó Bind Secrets to Environment Variables
        env:
          VAULT_NAME: ${{ secrets.KEY_VAULT_NAME }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          CONTAINER_APP_NAME: ${{ secrets.CONTAINER_APP_NAME }}
        run: |
          echo "üîó Binding secrets to environment variables..."
          existing_secrets=$(az containerapp secret list --name "$CONTAINER_APP_NAME" --resource-group "$RESOURCE_GROUP_NAME" --query "[].name" -o tsv)
          
          env_args=""
          for secret in $existing_secrets
          do
            # Sanitize secret name: replace - with _
            env_var_name=$(echo "$secret" | tr '-' '_' | tr '[:lower:]' '[:upper:]')
            env_args="$env_args $env_var_name=secretref:$secret"
          done
          
          az containerapp update \
            --name "$CONTAINER_APP_NAME" \
            --resource-group "$RESOURCE_GROUP_NAME" \
            --set-env-vars $env_args
        
          echo "‚úÖ Environment variables updated."

      - name: üåê Output Backend URL
        env:
          CONTAINER_APP_NAME: ${{ secrets.CONTAINER_APP_NAME }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
        run: |
          echo "üîç Fetching backend service URL..."
          az containerapp show \
            --name "$CONTAINER_APP_NAME" \
            --resource-group "$RESOURCE_GROUP_NAME" \
            --query properties.configuration.ingress.fqdn \
            -o tsv
