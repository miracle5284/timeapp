name: Build and Deploy Logging Service

on:
  push:
    paths:
      - 'logging-service/**'
      - 'infra/terraform/logging-service/**'
      - '.github/workflows/deploy-logging-service.yml'
    branches: [ "develop", "staging" ]
    tags: [ "*" ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: logging-service-prod

    steps:
      - name: üì¶ Checkout Code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: üê≥ Build and Push Logging Service Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./logging-service
          dockerfile: ./logging-service/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/chrona-logging-service:latest

      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üß± Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4

      - name: ‚úÖ Terraform Init and Apply
        working-directory: ./infra/terraform/logging-service
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ secrets.STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ secrets.STORAGE_CONTAINER_NAME }}" \
            -backend-config="key=${{ secrets.TFSTATE_KEY }}"

      - name: ‚úÖ Terraform Plan
        working-directory: ./infra/terraform/logging-service
        run: |
          echo "Running Terraform Plan..."
          terraform plan -no-color

      - name: ‚úÖ Terraform Apply
        working-directory: ./infra/terraform/logging-service
        run: |
          terraform apply -auto-approve \
            -var "resource_group_name=${{ secrets.RESOURCE_GROUP_NAME }}" \
            -var "location=${{ secrets.LOCATION }}" \
            -var "container_app_env_name=${{ secrets.CONTAINER_APP_ENV_NAME }}" \
            -var "app_name=${{ secrets.CONTAINER_APP_NAME }}" \
            -var "logging_service_image=ghcr.io/${{ github.repository_owner }}/chrona-logging-service:latest" \
            -var "key_vault_name=${{ secrets.KEY_VAULT_NAME }}"

      - name: üîë Fetch and Inject Vault Secrets into Container App
        env:
          VAULT_NAME: ${{ secrets.KEY_VAULT_NAME }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          CONTAINER_APP_NAME: ${{ secrets.CONTAINER_APP_NAME }}
        run: |
          echo "üîé Fetching secrets from Key Vault..."
          secrets=$(az keyvault secret list --vault-name "$VAULT_NAME" --query "[].name" -o tsv)

          echo "üöÄ Injecting secrets into Container App..."
          for secret in $secrets
          do
            echo "Injecting secret: $secret"
            az containerapp secret set \
              --name "$CONTAINER_APP_NAME" \
              --resource-group "$RESOURCE_GROUP_NAME" \
              --secrets "$secret='@Microsoft.KeyVault(VaultName=$VAULT_NAME;SecretName=$secret)'"
          done

      - name: üîó Bind Secrets to Environment Variables
        env:
          VAULT_NAME: ${{ secrets.KEY_VAULT_NAME }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
          CONTAINER_APP_NAME: ${{ secrets.CONTAINER_APP_NAME }}
        run: |
          echo "üîó Binding secrets to environment variables..."
          secrets=$(az keyvault secret list --vault-name "$VAULT_NAME" --query "[].name" -o tsv)

          env_args=""
          for secret in $secrets
          do
            env_args="$env_args $secret=secretref:$secret"
          done

          az containerapp update \
            --name "$CONTAINER_APP_NAME" \
            --resource-group "$RESOURCE_GROUP_NAME" \
            --set-env-vars $env_args

          echo "‚úÖ Environment variables updated."

      - name: üåê Output Logging Service URL
        env:
          CONTAINER_APP_NAME: ${{ secrets.LOGGING_CONTAINER_APP_NAME }}
          RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
        run: |
          echo "üîç Fetching logging service URL..."
          az containerapp show \
            --name "$CONTAINER_APP_NAME" \
            --resource-group "$RESOURCE_GROUP_NAME" \
            --query properties.configuration.ingress.fqdn \
            -o tsv
